Design the database solution. Your design should include authorization, authentication, pricing, and high availability.
• Authorization. You can control authorization by using the Azure SQL Database and server level firewall functionality, allowing access only from the Tailwind Traders customer facing web servers. Private Endpoints may also be used to reduce theattack surface of the Azure SQL Database, and NSGs may be implemented to implement an added layer of security. To remediate potential threats and get reports against industry standard best practices, consider enabling Azure Defender for SQL. To protect data, consider implementing Transparent Data Encryption (TDE), Dynamic Data Masking, and Always Encrypted.
• Authentication. From the authentication standpoint, once you integrate Tailwind Traders’ Active Directory environment with Azure Active Directory, your internal users will be able to authenticate to Azure SQL Database by using their Active Directory credentials. To provide access to an Azure SQL database from other Azure resources, such as Azure web apps, you can associate them with a managed identity.
• Pricing. We would recommend Azure SQL Database because there was no requirement that the customer remain in control of the database engine or host OS. If compatibility issues are found during the testing or pilot phase, Azure SQL Managed Instance or SQL Server on a VM may be needed.
• Performance. Simply moving to Azure and allocating sufficient resources to the Azure SQL Database MAY resolve the noted performance issues. However, you may want to consider sharding the data and moving the product catalog to a NoSQL CosmosDB. This may provide a faster response time due to the materialized view CosmosDB would present. In addition, the database could be easily globally distributed. Note, this could require substantial effort to perform but may result in a better long-term solution.
• High Availability. We recommend business critical based on the high availability goals in the description. Specifically, it satisfies the immediate needs of not only storing relational data, but also providing low-latency, high-throughput transactions as well as the high availability of Always On and support for multiple read-only replicas. By deploying read-only replicas across different Azure regions, you could also minimize the latency of read operations from customers residing in these other regions, depending on the design of the website front end.
